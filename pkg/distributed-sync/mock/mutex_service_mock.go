// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package distributedsyncmock

import (
	"context"
	"sync"

	distributedsync "github.com/soulcodex/rockets-message-processor/pkg/distributed-sync"
)

// Ensure, that MutexServiceMock does implement distributedsync.MutexService.
// If this is not the case, regenerate this file with moq.
var _ distributedsync.MutexService = &MutexServiceMock{}

// MutexServiceMock is a mock implementation of distributedsync.MutexService.
//
//	func TestSomethingThatUsesMutexService(t *testing.T) {
//
//		// make and configure a mocked distributedsync.MutexService
//		mockedMutexService := &MutexServiceMock{
//			MutexFunc: func(ctx context.Context, key string, fn distributedsync.MutexCallback) (interface{}, error) {
//				panic("mock out the Mutex method")
//			},
//		}
//
//		// use mockedMutexService in code that requires distributedsync.MutexService
//		// and then make assertions.
//

type MutexServiceMock struct {
	// MutexFunc mocks the Mutex method.
	MutexFunc func(ctx context.Context, key string, fn distributedsync.MutexCallback) (interface{}, error)

	// calls tracks calls to the methods.
	calls struct {
		// Mutex holds details about calls to the Mutex method.
		Mutex []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Fn is the fn argument value.
			Fn distributedsync.MutexCallback
		}
	}
	lockMutex sync.RWMutex
}

// Mutex calls MutexFunc.
func (mock *MutexServiceMock) Mutex(ctx context.Context, key string, fn distributedsync.MutexCallback) (interface{}, error) {
	if mock.MutexFunc == nil {
		panic("MutexServiceMock.MutexFunc: method is nil but MutexService.Mutex was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
		Fn  distributedsync.MutexCallback
	}{
		Ctx: ctx,
		Key: key,
		Fn:  fn,
	}
	mock.lockMutex.Lock()
	mock.calls.Mutex = append(mock.calls.Mutex, callInfo)
	mock.lockMutex.Unlock()
	return mock.MutexFunc(ctx, key, fn)
}

// MutexCalls gets all the calls that were made to Mutex.
// Check the length with:
//
//	len(mockedMutexService.MutexCalls())
func (mock *MutexServiceMock) MutexCalls() []struct {
	Ctx context.Context
	Key string
	Fn  distributedsync.MutexCallback
} {
	var calls []struct {
		Ctx context.Context
		Key string
		Fn  distributedsync.MutexCallback
	}
	mock.lockMutex.RLock()
	calls = mock.calls.Mutex
	mock.lockMutex.RUnlock()
	return calls
}
